# import Post from "./generated/prisma.graphql"

type Query {
	feed(after: String, first: Int): PostConnection!
	post(id: ID!): Post
	me: User
	variables: PublicVariables
	usersConnection(after: String, first: Int): UserConnection!
	jobApplicationsConnection(after: String, first: Int): JobApplicationConnection!
	clientApplicationsConnection(after: String, first: Int): ClientApplicationConnection!
	clientApplication(id: ID!): ClientApplication
}

enum Package {
	Light,
	Pro,
	Enterprise
}

enum JobPosition {
	Media,
	Graphics,
	Photography,
	PublicRelations
}

type Mutation {
	# DASHBOARD
	# -----------
	# authorization
	login(username: String!, password: String!): AuthPayload!
	# posts
	publish(title: String!, body: String!, thumbnailBody: String!, thumbnailImageId: String ): Post!
	deletePost(id: ID!): Post!
	# admin
	addUser(name: String!, username: String!, password: String!, permissions: [Permission!]!): AuthPayload!
	loginAs(id: ID!): AuthPayload!
	changeUserPermissions(id: ID!, permissions: [Permission!]!): User
	deleteUser(id: ID!): User
	# files
	createFileEntry(name: String!, checksum: String!): File!
	# variables
	updateVariables(
		email: String
		phone1: String
		phone2: String
		address: String
		facebook: String
		instagram: String
		linkedIn: String
		contactEmail: String
		clientsEmail: String
		jobsEmail: String
		additionalTitle: String
		additionalBody: String): Variable
	# PUBLIC
	# -----------
	# applications
	applyClient(
		name: String!
		email: String!,
		address: String,
		phoneNumber: String,
		facebook: String
		postsPerMonth: Int!
		photography: Int!
		gifs: Int!
		videos: Int!
		videoMinutesCount: Int!
		website: Boolean!
		hasHost: Boolean!
		hasDomain: Boolean!	
		dealYears: Int!
		# preserved even if prices change
		dealPackage: Package!
		totalPrice: Int!
		): ClientApplication!
	applyForWork(
		email: String!,
		address: String,
		phoneNumber: String,
		firstName: String,
		middleName: String,
		lastName: String,
		positions: [JobPosition!]!,
		resumeFileId: String,
		linkedIn: String): JobApplication!
}

type AuthPayload {
	token: String!
	user: User!
}

type User {
	id: ID!
	username: String!
	permissions: [Permission!]!
	name: String!
	posts: [Post!]!
	lastLogin: DateTime
}

type File {
	id: String!
	name: String!
	checksum: String!
}

type PublicVariables {
	email: String
	phone1: String
	phone2: String
	address: String
	facebook: String
	instagram: String
	linkedIn: String
	additionalTitle: String
	additionalBody: String
}